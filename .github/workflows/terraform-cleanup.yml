name: Terraform Cleanup

on:
  workflow_dispatch:
    inputs:
      destroy_connectors:
        description: 'Destroy connectors first'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      remove_state_resources:
        description: 'Remove problematic resources from state'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      resource_pattern:
        description: 'Resource pattern to remove (e.g., connector or privatelink)'
        required: false
        default: 'connector'
        type: string

jobs:
  cleanup:
    runs-on: ubuntu-latest
    environment: staging
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
      CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      
      - name: Terraform Init
        run: |
          cd terraform/environments/evoluservices
          terraform init
      
      - name: List Terraform State
        id: list_state
        run: |
          cd terraform/environments/evoluservices
          echo "Current state resources:"
          terraform state list
          
          if [[ "${{ github.event.inputs.resource_pattern }}" != "" ]]; then
            echo "Resources matching pattern '${{ github.event.inputs.resource_pattern }}':"
            terraform state list | grep -i "${{ github.event.inputs.resource_pattern }}" || echo "No matching resources found"
          fi
      
      - name: Remove Problematic Resources from State
        if: ${{ github.event.inputs.remove_state_resources == 'true' }}
        run: |
          cd terraform/environments/evoluservices
          
          if [[ "${{ github.event.inputs.resource_pattern }}" != "" ]]; then
            echo "Removing resources matching pattern '${{ github.event.inputs.resource_pattern }}' from state..."
            
            # Create a temporary file with resources to remove
            terraform state list | grep -i "${{ github.event.inputs.resource_pattern }}" > resources_to_remove.txt
            
            if [ -s resources_to_remove.txt ]; then
              cat resources_to_remove.txt | while read resource; do
                echo "Removing $resource from state..."
                terraform state rm "$resource" || echo "Failed to remove $resource"
              done
            else
              echo "No matching resources found to remove"
            fi
          fi
      
      - name: Destroy Connectors First
        if: ${{ github.event.inputs.destroy_connectors == 'true' }}
        run: |
          cd terraform/environments/evoluservices
          
          # Create a temporary plan file targeting only connectors
          echo "Creating plan to destroy connectors..."
          terraform plan -destroy -target="module.kafka-connector-mysql" -target="module.kafka-connector-dynamodb" -target="module.kafka-connector-s3" -out=destroy_connectors.plan || echo "Some connectors might not exist in state"
          
          # Apply the plan
          echo "Destroying connectors..."
          terraform apply destroy_connectors.plan || echo "Failed to destroy some connectors"
      
      - name: Terraform Destroy
        run: |
          cd terraform/environments/evoluservices
          terraform destroy -auto-approve
        continue-on-error: true
      
      - name: Check for Dependent Resources Error
        id: check_error
        run: |
          cd terraform/environments/evoluservices
          
          # Try to get cluster ID
          CLUSTER_ID=$(terraform output -raw kafka_cluster_id 2>/dev/null || echo "")
          
          if [[ -n "$CLUSTER_ID" ]]; then
            echo "Found Kafka cluster ID: $CLUSTER_ID"
            echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
          fi
      
      - name: Destroy Connectors via API
        if: steps.check_error.outputs.cluster_id != ''
        run: |
          cd terraform/environments/evoluservices
          
          # Get environment ID
          ENV_ID=$(terraform output -raw environment_id 2>/dev/null || echo "")
          CLUSTER_ID="${{ steps.check_error.outputs.cluster_id }}"
          
          if [[ -n "$ENV_ID" && -n "$CLUSTER_ID" ]]; then
            echo "Using Environment ID: $ENV_ID and Cluster ID: $CLUSTER_ID"
            
            # Get list of connectors using Confluent Cloud API
            echo "Listing connectors..."
            CONNECTORS=$(curl -s --request GET \
              --url "https://api.confluent.cloud/connect/v1/environments/$ENV_ID/clusters/$CLUSTER_ID/connectors" \
              --header "Authorization: Basic $(echo -n $CONFLUENT_CLOUD_API_KEY:$CONFLUENT_CLOUD_API_SECRET | base64)" \
              --header 'Content-Type: application/json')
            
            echo "Found connectors: $CONNECTORS"
            
            # Extract connector names and delete each one
            echo $CONNECTORS | grep -o '"name":"[^"]*"' | awk -F':' '{print $2}' | tr -d '"' | while read connector; do
              if [[ -n "$connector" ]]; then
                echo "Deleting connector: $connector"
                curl -s --request DELETE \
                  --url "https://api.confluent.cloud/connect/v1/environments/$ENV_ID/clusters/$CLUSTER_ID/connectors/$connector" \
                  --header "Authorization: Basic $(echo -n $CONFLUENT_CLOUD_API_KEY:$CONFLUENT_CLOUD_API_SECRET | base64)" \
                  --header 'Content-Type: application/json'
                
                echo "Waiting for connector deletion to complete..."
                sleep 10
              fi
            done
            
            echo "All connectors deleted. Waiting for changes to propagate..."
            sleep 30
          else
            echo "Could not determine Environment ID or Cluster ID"
          fi
      
      - name: Final Terraform Destroy
        run: |
          cd terraform/environments/evoluservices
          terraform destroy -auto-approve