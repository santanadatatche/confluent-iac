name: Deploy Confluent Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  get-cluster-id:
    name: Get Cluster ID
    runs-on: ubuntu-latest
    environment: staging
    if: github.event.inputs.action == 'destroy'
    outputs:
      cluster_id: ${{ steps.get-id.outputs.cluster_id }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Get Cluster ID from S3 State
        id: get-id
        run: |
          # Download state file
          aws s3 cp s3://confluent-iac-terraform-state/staging/terraform.tfstate terraform.tfstate
          
          # Extract cluster ID using jq
          CLUSTER_ID=$(cat terraform.tfstate | jq -r '.resources[] | select(.type=="confluent_kafka_cluster" and .name=="enterprise") | .instances[0].attributes.id')
          echo "Found cluster ID: $CLUSTER_ID"
          echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
  
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Create S3 Bucket for State
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3api create-bucket --bucket confluent-iac-terraform-state --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2 2>/dev/null || true
          aws s3api put-bucket-versioning --bucket confluent-iac-terraform-state --versioning-configuration Status=Enabled
          
      - name: Terraform Init
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
          CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
        run: terraform init
        
      - name: Terraform Plan
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
          CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_connector_aws_access_key: ${{ secrets.CONNECTOR_AWS_ACCESS_KEY }}
          TF_VAR_connector_aws_secret_key: ${{ secrets.CONNECTOR_AWS_SECRET_KEY }}
          TF_VAR_connector_dynamodb_access_key: ${{ secrets.CONNECTOR_DYNAMODB_ACCESS_KEY }}
          TF_VAR_connector_dynamodb_secret_key: ${{ secrets.CONNECTOR_DYNAMODB_SECRET_KEY }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -var-file=terraform.tfvars

  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: [get-cluster-id]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Create S3 Bucket for State
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3api create-bucket --bucket confluent-iac-terraform-state --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2 2>/dev/null || true
          aws s3api put-bucket-versioning --bucket confluent-iac-terraform-state --versioning-configuration Status=Enabled
          
      - name: Terraform Init
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
          CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
        run: terraform init
        
      - name: Configure DNS for Private Link
        if: github.event.inputs.action != 'destroy'
        run: |
          # Configure DNS using AWS DNS resolver IP
          echo "169.254.169.253 *.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az1.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az2.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az3.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 flink.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          
          # Verify the entries
          cat /etc/hosts
          
      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy'
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
          CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_connector_aws_access_key: ${{ secrets.CONNECTOR_AWS_ACCESS_KEY }}
          TF_VAR_connector_aws_secret_key: ${{ secrets.CONNECTOR_AWS_SECRET_KEY }}
          TF_VAR_connector_dynamodb_access_key: ${{ secrets.CONNECTOR_DYNAMODB_ACCESS_KEY }}
          TF_VAR_connector_dynamodb_secret_key: ${{ secrets.CONNECTOR_DYNAMODB_SECRET_KEY }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve -var-file=terraform.tfvars
        
      - name: Configure DNS for Private Link
        if: github.event.inputs.action == 'destroy'
        run: |
          # Configure DNS using AWS DNS resolver IP directly
          echo "169.254.169.253 *.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az1.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az2.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 *.use2-az3.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 flink.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          echo "169.254.169.253 ${{ needs.get-cluster-id.outputs.cluster_id }}.us-east-2.aws.private.confluent.cloud" | sudo tee -a /etc/hosts
          
          # Verify the entries
          cat /etc/hosts
          
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_CLOUD_API_KEY: ${{ secrets.CONFLUENT_CLOUD_API_KEY }}
          CONFLUENT_CLOUD_API_SECRET: ${{ secrets.CONFLUENT_CLOUD_API_SECRET }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_connector_aws_access_key: ${{ secrets.CONNECTOR_AWS_ACCESS_KEY }}
          TF_VAR_connector_aws_secret_key: ${{ secrets.CONNECTOR_AWS_SECRET_KEY }}
          TF_VAR_connector_dynamodb_access_key: ${{ secrets.CONNECTOR_DYNAMODB_ACCESS_KEY }}
          TF_VAR_connector_dynamodb_secret_key: ${{ secrets.CONNECTOR_DYNAMODB_SECRET_KEY }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Remove problematic resources from state first
          echo "Removing kafka resources from state..."
          terraform state rm module.kafka_topic.confluent_kafka_topic.this || true
          terraform state rm module.kafka_connector_dynamodb_source.confluent_connector.this || true
          terraform state rm module.kafka_connector_mysql_source.confluent_connector.this || true
          terraform state rm module.kafka_connector_s3_sink.confluent_connector.this || true
          
          # Now destroy everything else
          terraform destroy -auto-approve -var-file=terraform.tfvars
        
      - name: Show Terraform Outputs
        if: github.event.inputs.action != 'destroy'
        working-directory: terraform/environments/evoluservices
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "=== Available Outputs ==="
          terraform output
          echo "\n=== Checking for hosts_command ==="
          terraform output hosts_command 2>/dev/null || echo "hosts_command output not available"
          echo "\n=== Checking for proxy outputs ==="
          terraform output proxy_public_ip 2>/dev/null || echo "proxy_public_ip not available"
          terraform output proxy_ssh_command 2>/dev/null || echo "proxy_ssh_command not available"